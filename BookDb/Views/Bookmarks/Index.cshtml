@model IEnumerable<BookDb.Models.Bookmark>

@{
    ViewData["Title"] = "Danh s√°ch Bookmark";
}

<link rel="stylesheet" href="~/css/bookmark-signalr.css" />

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Danh s√°ch Bookmark</h2>
    <div class="signalr-status-inline">
        <span class="realtime-indicator" id="realtimeIndicator"></span>
        <small class="text-muted">Real-time</small>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-8">
        <button type="button" class="btn btn-info" id="refreshBookmarks">
            <span id="refreshSpinner" class="spinner-border spinner-border-sm d-none"></span>
            L√†m m·ªõi
        </button>
        <a href="@Url.Action("TestSignalR", "Bookmarks")" class="btn btn-outline-secondary">
            üîß Test SignalR
        </a>
    </div>
    <div class="col-md-4">
        <form method="get" asp-action="Index" id="searchForm">
            <div class="input-group">
                <input type="text" name="q" id="searchQuery" class="form-control"
                       placeholder="T√¨m theo t√™n t√†i li·ªáu..."
                       value="@Context.Request.Query["q"]" />
                <button type="submit" class="btn btn-info">T√¨m</button>
            </div>
        </form>
    </div>
</div>

<div id="bookmarksContainer">
    @if (!Model.Any())
    {
        <div class="alert alert-info">
            Ch∆∞a c√≥ bookmark n√†o. H√£y th√™m bookmark khi xem t√†i li·ªáu!
        </div>
    }
    else
    {
        <table class="table table-bordered table-striped bookmark-table">
            <thead>
                <tr>
                    <th>T√†i li·ªáu</th>
                    <th>Trang</th>
                    <th>Ghi ch√∫</th>
                    <th>Ng√†y t·∫°o</th>
                    <th style="width: 200px;">Thao t√°c</th>
                </tr>
            </thead>
            <tbody id="bookmarksList">
                @foreach (var item in Model)
                {
                    <tr data-bookmark-id="@item.Id">
                        <td>@item.DocumentPage?.Document?.Title</td>
                        <td class="text-center">@item.DocumentPage?.PageNumber</td>
                        <td>@item.Title</td>
                        <td>@item.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>
                            <a asp-controller="Documents" asp-action="ViewDocument"
                               asp-route-id="@item.DocumentPage?.DocumentId"
                               asp-route-mode="paged"
                               asp-route-page="@item.DocumentPage?.PageNumber"
                               class="btn btn-sm btn-success">Xem</a>

                            <button type="button" class="btn btn-sm btn-danger delete-bookmark-btn"
                                    data-id="@item.Id"
                                    data-title="@item.Title">
                                X√≥a
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Modal for Bookmark Details -->
<div class="modal fade" id="bookmarkModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chi ti·∫øt Bookmark</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="bookmarkModalBody">
                <!-- Content loaded via AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ƒê√≥ng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/bookmark-signalr.js"></script>
    <script>
        $(document).ready(function () {
            // Ajax search with debounce
            let searchTimeout;
            $('#searchQuery').on('input', function () {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function () {
                    performSearch();
                }, 500);
            });

            function performSearch() {
                const query = $('#searchQuery').val();
                loadBookmarks(query);
            }

            // Refresh bookmarks
            $('#refreshBookmarks').on('click', function () {
                const query = $('#searchQuery').val();
                loadBookmarks(query);
            });

            function loadBookmarks(query = '') {
                $.ajax({
                    url: '@Url.Action("Index", "Bookmarks")',
                    type: 'GET',
                    data: { q: query },
                    beforeSend: function () {
                        $('#refreshSpinner').removeClass('d-none');
                    },
                    success: function (response) {
                        const $html = $(response);
                        const newContent = $html.find('#bookmarksList').html();

                        if (newContent) {
                            $('#bookmarksList').html(newContent);
                            window.NotificationHub.showLocal('ƒê√£ c·∫≠p nh·∫≠t danh s√°ch', 'success');
                        } else {
                            $('#bookmarksContainer').html('<div class="alert alert-info">Kh√¥ng t√¨m th·∫•y bookmark n√†o</div>');
                        }
                    },
                    error: function () {
                        window.NotificationHub.showLocal('C√≥ l·ªói khi t·∫£i danh s√°ch', 'error');
                    },
                    complete: function () {
                        $('#refreshSpinner').addClass('d-none');
                    }
                });
            }

            // Delete bookmark with Ajax
            $(document).on('click', '.delete-bookmark-btn', function () {
                const bookmarkId = $(this).data('id');
                const title = $(this).data('title') || 'bookmark n√†y';
                const $row = $(this).closest('tr');

                if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${title}"?`)) {
                    return;
                }

                $.ajax({
                    url: '@Url.Action("Delete", "Bookmarks")/' + bookmarkId,
                    type: 'POST',
                    data: {
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    beforeSend: function () {
                        $row.css('opacity', '0.5');
                    },
                    success: function () {
                        $row.fadeOut(300, function () {
                            $(this).remove();

                            // Check if no more bookmarks
                            if ($('#bookmarksList tr').length === 0) {
                                $('#bookmarksContainer').html('<div class="alert alert-info">Ch∆∞a c√≥ bookmark n√†o</div>');
                            }
                        });

                        window.NotificationHub.showLocal('ƒê√£ x√≥a bookmark', 'success');

                        // Notify other users
                        if (window.NotificationHub) {
                            window.NotificationHub.sendNotification(`Bookmark "${title}" ƒë√£ b·ªã x√≥a`);
                        }
                    },
                    error: function (xhr) {
                        $row.css('opacity', '1');
                        let errorMsg = 'C√≥ l·ªói khi x√≥a bookmark';
                        if (xhr.status === 404) {
                            errorMsg = 'Kh√¥ng t√¨m th·∫•y bookmark';
                        }
                        window.NotificationHub.showLocal(errorMsg, 'error');
                    }
                });
            });

            // Listen for bookmark changes via SignalR
            if (window.signalR && window.NotificationHub && window.NotificationHub.connection) {
                const connection = window.NotificationHub.connection;

                // Listen for bookmark created
                connection.on('BookmarkCreated', function (data) {
                    console.log('Bookmark created:', data);
                    window.NotificationHub.showLocal(
                        `üîñ Bookmark m·ªõi: ${data.Title}`,
                        'success'
                    );
                    
                    // Refresh the bookmark list
                    setTimeout(function () {
                        const query = $('#searchQuery').val();
                        loadBookmarks(query);
                    }, 500);
                });

                // Listen for bookmark deleted
                connection.on('BookmarkDeleted', function (data) {
                    console.log('Bookmark deleted:', data);
                    
                    // Remove the row with animation
                    const $row = $(`tr[data-bookmark-id="${data.BookmarkId}"]`);
                    if ($row.length > 0) {
                        $row.addClass('bookmark-deleted');
                        $row.css('background-color', '#f8d7da');
                        setTimeout(function() {
                            $row.fadeOut(500, function () {
                                $(this).remove();
                                
                                // Check if list is empty
                                if ($('#bookmarksList tr').length === 0) {
                                    $('#bookmarksContainer').html('<div class="alert alert-info bookmarks-empty-state">Ch∆∞a c√≥ bookmark n√†o</div>');
                                }
                            });
                        }, 300);
                    }
                });

                // Listen for bookmark updated
                connection.on('BookmarkUpdated', function (data) {
                    console.log('Bookmark updated:', data);
                    window.NotificationHub.showLocal(
                        `‚úèÔ∏è Bookmark ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${data.Title}`,
                        'info'
                    );
                    
                    // Highlight the updated row
                    const $row = $(`tr[data-bookmark-id="${data.BookmarkId}"]`);
                    if ($row.length > 0) {
                        $row.addClass('bookmark-updated');
                        setTimeout(() => {
                            $row.removeClass('bookmark-updated');
                        }, 1500);
                    }
                    
                    // Refresh list after a delay
                    setTimeout(function () {
                        const query = $('#searchQuery').val();
                        loadBookmarks(query);
                    }, 500);
                });

                // Also listen for general notifications about bookmarks
                connection.on('ReceiveNotification', function (message) {
                    if (message.toLowerCase().includes('bookmark')) {
                        console.log('General bookmark notification:', message);
                    }
                });

                // Update real-time indicator
                function updateRealtimeIndicator() {
                    const indicator = $('#realtimeIndicator');
                    if (connection && connection.state === signalR.HubConnectionState.Connected) {
                        indicator.removeClass('disconnected');
                    } else {
                        indicator.addClass('disconnected');
                    }
                }

                // Check connection status periodically
                setInterval(updateRealtimeIndicator, 2000);
                updateRealtimeIndicator();
            }
        });
    </script>
}

@* Anti-forgery token for AJAX *@
<form id="__AjaxAntiForgeryForm" style="display:none">
    @Html.AntiForgeryToken()
</form>