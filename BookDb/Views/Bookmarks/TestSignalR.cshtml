@{
    ViewData["Title"] = "Test Bookmark SignalR";
}

<div class="container mt-4">
    <h2>üîñ Test Bookmark SignalR Integration</h2>
    
    <div class="alert alert-info">
        <strong>‚ÑπÔ∏è H∆∞·ªõng d·∫´n:</strong>
        <ul class="mb-0">
            <li>M·ªü trang n√†y ·ªü nhi·ªÅu tab/c·ª≠a s·ªï kh√°c nhau</li>
            <li>Th·ª±c hi·ªán c√°c thao t√°c t·∫°o/x√≥a bookmark</li>
            <li>Xem th√¥ng b√°o real-time tr√™n t·∫•t c·∫£ c√°c tab</li>
        </ul>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5>üì§ G·ª≠i Test Notifications</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Bookmark Title:</label>
                        <input type="text" id="bookmarkTitle" class="form-control" 
                               placeholder="My Test Bookmark" value="Test Bookmark">
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Bookmark ID:</label>
                        <input type="number" id="bookmarkId" class="form-control" 
                               placeholder="123" value="999">
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Document ID:</label>
                        <input type="number" id="documentId" class="form-control" 
                               placeholder="1" value="1">
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Page Number:</label>
                        <input type="number" id="pageNumber" class="form-control" 
                               placeholder="10" value="10">
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button class="btn btn-success" id="btnTestCreate">
                            ‚úÖ Test Bookmark Created
                        </button>
                        <button class="btn btn-warning" id="btnTestUpdate">
                            ‚úèÔ∏è Test Bookmark Updated
                        </button>
                        <button class="btn btn-danger" id="btnTestDelete">
                            üóëÔ∏è Test Bookmark Deleted
                        </button>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header bg-success text-white">
                    <h5>üìä SignalR Status</h5>
                </div>
                <div class="card-body">
                    <div class="mb-2">
                        <strong>Connection Status:</strong>
                        <span id="connectionStatus" class="badge bg-secondary">Checking...</span>
                    </div>
                    <div class="mb-2">
                        <strong>Events Received:</strong>
                        <span id="eventCount" class="badge bg-info">0</span>
                    </div>
                    <div class="mb-2">
                        <strong>Last Event:</strong>
                        <span id="lastEvent" class="text-muted">None</span>
                    </div>
                    <button class="btn btn-sm btn-warning" id="btnReconnect">
                        üîÑ Reconnect
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">üìã Event Log</h5>
                    <button class="btn btn-sm btn-outline-light" id="btnClearLog">Clear</button>
                </div>
                <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                    <div id="eventLog" class="font-monospace small">
                        <div class="text-muted">Waiting for events...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5>üîó Quick Links</h5>
                </div>
                <div class="card-body">
                    <a href="@Url.Action("Index", "Bookmarks")" class="btn btn-outline-primary">
                        üìö Go to Bookmarks List
                    </a>
                    <a href="@Url.Action("Index", "Documents")" class="btn btn-outline-secondary">
                        üìÑ Go to Documents
                    </a>
                    <a href="@Url.Action("SignalRDemo", "Home")" class="btn btn-outline-info">
                        üîß General SignalR Test
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/bookmark-signalr.js"></script>
    <script>
        let eventCount = 0;

        $(document).ready(function () {
            initializeBookmarkSignalR();
            setupEventHandlers();
            checkConnectionStatus();
        });

        function initializeBookmarkSignalR() {
            if (!window.NotificationHub) {
                console.error('NotificationHub not available');
                setTimeout(initializeBookmarkSignalR, 500);
                return;
            }

            // Wait for NotificationHub to be ready
            const checkReady = setInterval(function() {
                if (window.NotificationHub.isConnected) {
                    clearInterval(checkReady);
                    
                    window.BookmarkSignalR.init(
                        onBookmarkCreated,
                        onBookmarkDeleted,
                        onBookmarkUpdated
                    );
                    
                    logEvent('INFO', 'Bookmark SignalR initialized');
                    updateConnectionStatus('Connected', 'success');
                }
            }, 100);
        }

        function onBookmarkCreated(data) {
            eventCount++;
            updateEventCount();
            updateLastEvent('BookmarkCreated');
            
            logEvent('SUCCESS', 'BookmarkCreated', data);
            window.NotificationHub.showLocal(
                `üîñ Bookmark created: ${data.Title}`,
                'success'
            );
        }

        function onBookmarkDeleted(data) {
            eventCount++;
            updateEventCount();
            updateLastEvent('BookmarkDeleted');
            
            logEvent('WARNING', 'BookmarkDeleted', data);
            window.NotificationHub.showLocal(
                `üóëÔ∏è Bookmark deleted: ${data.Title}`,
                'warning'
            );
        }

        function onBookmarkUpdated(data) {
            eventCount++;
            updateEventCount();
            updateLastEvent('BookmarkUpdated');
            
            logEvent('INFO', 'BookmarkUpdated', data);
            window.NotificationHub.showLocal(
                `‚úèÔ∏è Bookmark updated: ${data.Title}`,
                'info'
            );
        }

        function setupEventHandlers() {
            $('#btnTestCreate').on('click', function() {
                const id = parseInt($('#bookmarkId').val());
                const title = $('#bookmarkTitle').val();
                const docId = parseInt($('#documentId').val());
                const pageNum = parseInt($('#pageNumber').val());
                
                window.BookmarkSignalR.notifyBookmarkCreated(id, title, docId, pageNum)
                    .then(() => logEvent('SENT', 'NotifyBookmarkCreated', { id, title, docId, pageNum }))
                    .catch(err => logEvent('ERROR', 'Failed to send', err));
            });

            $('#btnTestUpdate').on('click', function() {
                const id = parseInt($('#bookmarkId').val());
                const title = $('#bookmarkTitle').val();
                
                window.BookmarkSignalR.notifyBookmarkUpdated(id, title)
                    .then(() => logEvent('SENT', 'NotifyBookmarkUpdated', { id, title }))
                    .catch(err => logEvent('ERROR', 'Failed to send', err));
            });

            $('#btnTestDelete').on('click', function() {
                const id = parseInt($('#bookmarkId').val());
                const title = $('#bookmarkTitle').val();
                
                window.BookmarkSignalR.notifyBookmarkDeleted(id, title)
                    .then(() => logEvent('SENT', 'NotifyBookmarkDeleted', { id, title }))
                    .catch(err => logEvent('ERROR', 'Failed to send', err));
            });

            $('#btnClearLog').on('click', function() {
                $('#eventLog').html('<div class="text-muted">Waiting for events...</div>');
                eventCount = 0;
                updateEventCount();
            });

            $('#btnReconnect').on('click', function() {
                logEvent('INFO', 'Reconnecting...');
                location.reload();
            });
        }

        function logEvent(type, message, data = null) {
            const timestamp = new Date().toLocaleTimeString('vi-VN');
            const colors = {
                'INFO': 'text-info',
                'SUCCESS': 'text-success',
                'WARNING': 'text-warning',
                'ERROR': 'text-danger',
                'SENT': 'text-primary'
            };
            
            let logEntry = `
                <div class="border-bottom pb-2 mb-2">
                    <div class="${colors[type] || 'text-secondary'}">
                        <strong>[${timestamp}] ${type}:</strong> ${message}
                    </div>
            `;
            
            if (data) {
                logEntry += `<div class="text-muted ms-3"><small>${JSON.stringify(data, null, 2)}</small></div>`;
            }
            
            logEntry += '</div>';
            
            const $log = $('#eventLog');
            if ($log.find('.text-muted').length > 0 && $log.find('.text-muted').text() === 'Waiting for events...') {
                $log.empty();
            }
            
            $log.prepend(logEntry);
            
            // Limit to 50 entries
            const entries = $log.children();
            if (entries.length > 50) {
                entries.slice(50).remove();
            }
        }

        function updateConnectionStatus(text, type) {
            const badge = $('#connectionStatus');
            badge.removeClass('bg-secondary bg-success bg-warning bg-danger');
            badge.addClass('bg-' + type);
            badge.text(text);
        }

        function updateEventCount() {
            $('#eventCount').text(eventCount);
        }

        function updateLastEvent(eventName) {
            $('#lastEvent').text(eventName + ' at ' + new Date().toLocaleTimeString('vi-VN'));
        }

        function checkConnectionStatus() {
            setInterval(function() {
                if (window.NotificationHub && window.NotificationHub.isConnected) {
                    updateConnectionStatus('Connected', 'success');
                } else {
                    updateConnectionStatus('Disconnected', 'danger');
                }
            }, 2000);
        }
    </script>
}
