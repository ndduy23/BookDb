@model BookDb.Models.Document

@{
    ViewData["Title"] = "S·ª≠a t√†i li·ªáu";
}

<style>
    .field-updated-by-other {
        animation: fieldHighlight 2s ease-in-out;
        border-color: #0d6efd !important;
    }

    @@keyframes fieldHighlight {
        0%, 100% { background-color: transparent; }
        50% { background-color: #cfe2ff; }
    }

    .editing-indicator {
        animation: slideInDown 0.3s ease-out;
        margin-bottom: 10px;
    }

    @@keyframes slideInDown {
        from { transform: translateY(-100%); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    #editing-indicators-container {
        position: sticky;
        top: 70px;
        z-index: 1000;
        margin-bottom: 20px;
    }
</style>

<div id="editing-indicators-container"></div>

<h2>S·ª≠a t√†i li·ªáu</h2>

<form asp-action="Edit" asp-route-id="@Model.Id" enctype="multipart/form-data" method="post" id="editDocumentForm">
    <div class="mb-3">
        <label class="form-label">Ti√™u ƒë·ªÅ</label>
        <input name="title" id="title" value="@Model.Title" class="form-control" required data-field-name="title" />
    </div>

    <div class="mb-3">
        <label class="form-label">Lƒ©nh v·ª±c</label>
        <input name="category" id="category" value="@Model.Category" class="form-control" data-field-name="category" />
    </div>

    <div class="mb-3">
        <label class="form-label">T√°c gi·∫£</label>
        <input name="author" id="author" value="@Model.Author" class="form-control" data-field-name="author" />
    </div>

    <div class="mb-3">
        <label class="form-label">File m·ªõi (n·∫øu mu·ªën thay th·∫ø)</label>
        <input type="file" name="file" class="form-control" />
        @if (!string.IsNullOrEmpty(Model.FilePath))
        {
            <p>File hi·ªán t·∫°i: <a href="@Model.FilePath" target="_blank">üìÑ Xem file</a></p>
        }
    </div>

    <button type="submit" class="btn btn-primary">C·∫≠p nh·∫≠t</button>
    <a asp-action="Index" class="btn btn-secondary">H·ªßy</a>
</form>

@section Scripts {
    <script src="~/js/document-editing-realtime.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize real-time editing
            const documentId = @Model.Id;
            const documentTitle = '@(Model.Title?.Replace("'", "\\'") ?? "")';
            const userName = 'User_' + Math.floor(Math.random() * 1000); // TODO: Get from authentication
            
            window.DocumentEditingRealtime.init(documentId, userName);

            // Track when user starts editing
            let editingStarted = false;
            $('input[data-field-name], textarea[data-field-name]').on('focus', function() {
                if (!editingStarted) {
                    editingStarted = true;
                    window.DocumentEditingRealtime.startEditing(documentTitle);
                }
            });

            // Track field changes and notify in real-time
            let debounceTimers = {};
            $('input[data-field-name], textarea[data-field-name]').on('input', function() {
                const $field = $(this);
                const fieldName = $field.data('field-name');
                const newValue = $field.val();

                clearTimeout(debounceTimers[fieldName]);
                debounceTimers[fieldName] = setTimeout(function() {
                    window.DocumentEditingRealtime.notifyFieldChange(fieldName, newValue);
                }, 500);
            });

            // Stop editing notifications
            $(window).on('beforeunload', function() {
                window.DocumentEditingRealtime.stopEditing();
            });

            $('#editDocumentForm').on('submit', function() {
                window.DocumentEditingRealtime.stopEditing();
            });
        });
    </script>
}

