@model BookDb.Models.Document

@{
    ViewData["Title"] = "Xem tài liệu";
    string mode = ViewBag.Mode ?? "original";
    var currentPage = ViewBag.Page as BookDb.Models.DocumentPage;
    int page = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 0;
}

<h2>@Model.Title</h2>
<p>
    <b>Tác giả:</b> @Model.Author <br />
    <b>Lĩnh vực:</b> @Model.Category <br />
    <b>Ngày tạo:</b> @Model.CreatedAt.ToString("dd/MM/yyyy") <br />
    <b>Mô tả:</b> @Model.Description
</p>

<!-- Nút chuyển đổi giữa bản gốc và bản phân trang -->
<div class="mb-3 d-flex align-items-center">
    @if (mode == "paged")
    {
        <a asp-action="ViewDocument" asp-route-id="@Model.Id" asp-route-mode="original" class="btn btn-info">
            Xem bản gốc
        </a>
    }
    else
    {
        <a asp-action="ViewDocument" asp-route-id="@Model.Id" asp-route-mode="paged" class="btn btn-info">
            Xem bản phân trang
        </a>
    }

    @* Page controls placed next to the mode switch *@
    @if (mode == "paged" && Model.Pages != null && Model.Pages.Any() && totalPages > 0)
    {
        var topPageInfo = $"Trang {page} / {totalPages}";
        <div class="ms-3">
            <div class="btn-group" role="group" aria-label="Trang">
                @if (page > 1)
                {
                    <a asp-action="ViewDocument" asp-route-id="@Model.Id" asp-route-mode="paged" asp-route-page="@(page - 1)" class="btn btn-secondary">←</a>
                }

                <a class="btn btn-light disabled">@topPageInfo</a>

                @if (page < totalPages)
                {
                    <a asp-action="ViewDocument" asp-route-id="@Model.Id" asp-route-mode="paged" asp-route-page="@(page + 1)" class="btn btn-secondary">→</a>
                    <a asp-action="ViewDocument" asp-route-id="@Model.Id" asp-route-mode="paged" asp-route-page="@(totalPages)" class="btn btn-secondary">Trang cuối »</a>
                }
            </div>
        </div>
    }
</div>

<!-- Hiển thị PDF và HTML (Excel) -->
@if (mode == "paged")
{
    if (Model.Pages != null && Model.Pages.Any())
    {
        var currentPageDoc = Model.Pages
            .OrderBy(p => p.PageNumber)
            .FirstOrDefault(p => p.PageNumber == page);

        if (currentPageDoc != null)
        {
            var iframeSrc = Url.Content(currentPageDoc.FilePath ?? "");
            bool hasBookmark = currentPageDoc.Bookmark != null;

            // If the generated page is HTML (from Excel), show it directly. Otherwise (PDF) show inside an iframe as well.
            if (!string.IsNullOrEmpty(currentPageDoc.ContentType) && currentPageDoc.ContentType.Contains("text/html"))
            {
                <iframe id="docFrame" src="@iframeSrc" width="80%" height="1000px" style="border:1px solid #ccc"></iframe>
            }
            else
            {
                <iframe id="docFrame" src="@iframeSrc" width="60%" height="1200px" style="border:1px solid #ccc"></iframe>
            }

            <!-- Hiển thị thông tin trang hiện tại / tổng trang -->
            @if (totalPages > 0)
            {
                var pageInfo = $"Trang {page} / {totalPages}";
                <div class="mt-2">@pageInfo</div>
            }

            @if (hasBookmark)
            {
                <button type="button" class="btn btn-warning" onclick="alert('Bookmark đã tồn tại trên trang này');">Đã có Bookmark</button>
            }
            else
            {
                <form asp-controller="Bookmarks" asp-action="Create" method="post" style="display:inline" onsubmit="return showBookmarkMessage();">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="documentPageId" value="@(currentPageDoc.Id)" />
                    <button type="submit" class="btn btn-primary">Thêm Bookmark</button>
                </form>
            }

        }
        else
        {
            <p class="text-danger">Trang không tồn tại.</p>
        }
    }
    else
    {
        <p class="text-danger">Tài liệu chưa được phân trang.</p>
    }
}
else
{
    if (!string.IsNullOrEmpty(Model.FilePath))
    {
        <iframe id="docFrame" src="@Url.Content(Model.FilePath)" width="60%" height="1200px" style="border:1px solid #ccc"></iframe>
    }
    else
    {
        <p class="text-danger">Không tìm thấy file gốc.</p>
    }
}

<script src="/lib/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="/js/document-notify.js"></script>
<script>
    (function () {
        var docId = @Model.Id;
        var currentPageId = @((currentPage != null) ? currentPage.Id : 0);
        var currentPageNumber = page;
        var mode = '@mode';

        function onPageChanged(payload, action) {
            try {
                console.log('Page change detected:', action, payload);

                if (action === 'updated') {
                    // If the changed page is the same as currently displayed, reload the iframe
                    if (payload && payload.PageId && payload.PageId === currentPageId) {
                        var frame = document.getElementById('docFrame');
                        if (frame) {
                            // Add timestamp to force reload
                            var src = frame.src.split('?')[0];
                            frame.src = src + '?t=' + new Date().getTime();
                            console.info('Page updated externally, reloaded iframe.');
                        }
                    } else if (payload && payload.PageNumber && payload.PageNumber === currentPageNumber) {
                        // Reload the entire page to reflect changes
                        setTimeout(function() {
                            location.reload();
                        }, 1000);
                    }
                } else if (action === 'added') {
                    // A new page was added, optionally reload to show updated page count
                    console.info('New page added to document');
                    // Could show a notification to refresh
                    if (confirm('Có trang mới được thêm vào. Tải lại trang để xem?')) {
                        location.reload();
                    }
                } else if (action === 'deleted') {
                    // A page was deleted
                    if (payload && payload.PageId && payload.PageId === currentPageId) {
                        // Current page was deleted, redirect to first page or document list
                        alert('Trang hiện tại đã bị xóa. Chuyển về trang đầu.');
                        window.location.href = '/documents/view/@Model.Id?mode=paged&page=1';
                    } else if (payload && payload.PageNumber && payload.PageNumber === currentPageNumber) {
                        setTimeout(function() {
                            location.reload();
                        }, 1000);
                    }
                }
            } catch (e) {
                console.error('Error handling page change:', e);
            }
        }

        // Start SignalR notification system
        startDocumentNotify(docId, onPageChanged);

        // Leave group when navigating away
        window.addEventListener('beforeunload', function () {
            stopDocumentNotify(docId);
        });

        // Auto-reload iframe periodically as a fallback (optional)
        // Uncomment if you want periodic refresh
        /*
        setInterval(function() {
            var frame = document.getElementById('docFrame');
            if (frame && mode === 'paged') {
                var src = frame.src.split('?')[0];
                frame.src = src + '?t=' + new Date().getTime();
            }
        }, 30000); // Every 30 seconds
        */
    })();
</script>

<script>
    function showBookmarkMessage() {
        try {
            alert("Đã lưu bookmark!");
            return true; // cho phép submit form
        } catch (e) {
            alert("Có lỗi xảy ra!");
            return false; // chặn submit nếu lỗi
        }
    }
</script>

<p class="mt-3">
    <a asp-action="Index" class="btn btn-secondary">← Quay lại danh sách</a>
</p>