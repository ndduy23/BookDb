@{
    ViewData["Title"] = "SignalR Demo";
}

<div class="container mt-4">
    <h2>SignalR Real-time Notification Demo</h2>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5>Gửi Notification</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="notificationMessage" class="form-label">Nội dung thông báo:</label>
                        <textarea id="notificationMessage" class="form-control" rows="3" placeholder="Nhập nội dung thông báo..."></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="notificationType" class="form-label">Loại thông báo:</label>
                        <select id="notificationType" class="form-select">
                            <option value="info">Info</option>
                            <option value="success">Success</option>
                            <option value="warning">Warning</option>
                            <option value="error">Error</option>
                        </select>
                    </div>
                    <button id="sendNotificationBtn" class="btn btn-primary w-100">
                        <i class="bi bi-send"></i> Gửi Notification
                    </button>
                    <button id="sendViaSignalRBtn" class="btn btn-success w-100 mt-2">
                        <i class="bi bi-broadcast"></i> Gửi qua SignalR (Tất cả users)
                    </button>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header bg-info text-white">
                    <h5>Kết nối SignalR</h5>
                </div>
                <div class="card-body">
                    <div class="mb-2">
                        <strong>Trạng thái:</strong>
                        <span id="connectionStatus" class="badge bg-secondary">Đang kết nối...</span>
                    </div>
                    <div class="mb-2">
                        <strong>Connection ID:</strong>
                        <span id="connectionId" class="text-muted">N/A</span>
                    </div>
                    <div class="mb-2">
                        <strong>Thông báo đã nhận:</strong>
                        <span id="receivedCount" class="badge bg-primary">0</span>
                    </div>
                    <button id="reconnectBtn" class="btn btn-warning btn-sm">
                        Kết nối lại
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5>Lịch sử Notifications</h5>
                </div>
                <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                    <ul id="notificationHistory" class="list-group">
                        <li class="list-group-item text-muted">Chưa có thông báo nào...</li>
                    </ul>
                </div>
                <div class="card-footer">
                    <button id="clearHistoryBtn" class="btn btn-danger btn-sm">
                        Xóa lịch sử
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-dark text-white">
                    <h5>Test Actions</h5>
                </div>
                <div class="card-body">
                    <div class="btn-group" role="group">
                        <button class="btn btn-outline-primary" onclick="testAction('document_uploaded')">
                            📄 Simulate Document Upload
                        </button>
                        <button class="btn btn-outline-danger" onclick="testAction('document_deleted')">
                            🗑️ Simulate Document Delete
                        </button>
                        <button class="btn btn-outline-warning" onclick="testAction('document_updated')">
                            ✏️ Simulate Document Update
                        </button>
                        <button class="btn btn-outline-success" onclick="testAction('bookmark_created')">
                            🔖 Simulate Bookmark Create
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let connection = null;
        let receivedCount = 0;

        $(document).ready(function () {
            initializeSignalR();

            // Send local notification
            $('#sendNotificationBtn').on('click', function () {
                const message = $('#notificationMessage').val().trim();
                const type = $('#notificationType').val();

                if (!message) {
                    alert('Vui lòng nhập nội dung thông báo');
                    return;
                }

                window.NotificationHub.showLocal(message, type);
                addToHistory(message, type, 'Local');
            });

            // Send via SignalR
            $('#sendViaSignalRBtn').on('click', function () {
                const message = $('#notificationMessage').val().trim();

                if (!message) {
                    alert('Vui lòng nhập nội dung thông báo');
                    return;
                }

                if (connection && connection.state === signalR.HubConnectionState.Connected) {
                    connection.invoke('SendNotification', message)
                        .then(() => {
                            console.log('Notification sent via SignalR');
                            addToHistory(message, 'info', 'SignalR Sent');
                        })
                        .catch(err => {
                            console.error('Error:', err);
                            window.NotificationHub.showLocal('Lỗi khi gửi qua SignalR', 'error');
                        });
                } else {
                    window.NotificationHub.showLocal('SignalR chưa kết nối', 'warning');
                }
            });

            // Clear history
            $('#clearHistoryBtn').on('click', function () {
                $('#notificationHistory').html('<li class="list-group-item text-muted">Chưa có thông báo nào...</li>');
                receivedCount = 0;
                updateReceivedCount();
            });

            // Reconnect
            $('#reconnectBtn').on('click', function () {
                if (connection) {
                    connection.stop().then(() => {
                        initializeSignalR();
                    });
                }
            });
        });

        function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl('/notify')
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.on('ReceiveNotification', function (message) {
                console.log('Received:', message);
                receivedCount++;
                updateReceivedCount();
                addToHistory(message, 'info', 'SignalR Received');
            });

            connection.onreconnecting(() => {
                updateConnectionStatus('Đang kết nối lại...', 'warning');
            });

            connection.onreconnected((connectionId) => {
                updateConnectionStatus('Đã kết nối', 'success');
                $('#connectionId').text(connectionId || 'N/A');
            });

            connection.onclose(() => {
                updateConnectionStatus('Ngắt kết nối', 'danger');
            });

            connection.start()
                .then(() => {
                    updateConnectionStatus('Đã kết nối', 'success');
                    console.log('SignalR Connected');
                    return connection.invoke('getConnectionId');
                })
                .catch(err => {
                    updateConnectionStatus('Lỗi kết nối', 'danger');
                    console.error('SignalR Error:', err);
                });
        }

        function updateConnectionStatus(text, type) {
            const badge = $('#connectionStatus');
            badge.removeClass('bg-secondary bg-success bg-warning bg-danger');
            badge.addClass('bg-' + type);
            badge.text(text);
        }

        function updateReceivedCount() {
            $('#receivedCount').text(receivedCount);
        }

        function addToHistory(message, type, source) {
            const historyList = $('#notificationHistory');

            if (historyList.find('.text-muted').length > 0) {
                historyList.empty();
            }

            const timestamp = new Date().toLocaleTimeString('vi-VN');
            const icon = getIconForType(type);
            const badgeClass = getBadgeClass(type);

            const item = `
                <li class="list-group-item">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="ms-2 me-auto">
                            <div class="fw-bold">${icon} ${message}</div>
                            <small class="text-muted">${timestamp} - ${source}</small>
                        </div>
                        <span class="badge ${badgeClass}">${type}</span>
                    </div>
                </li>
            `;

            historyList.prepend(item);

            // Limit history to 50 items
            if (historyList.children().length > 50) {
                historyList.children().last().remove();
            }
        }

        function getIconForType(type) {
            switch (type) {
                case 'success': return '✓';
                case 'error': return '✗';
                case 'warning': return '⚠';
                default: return 'ℹ';
            }
        }

        function getBadgeClass(type) {
            switch (type) {
                case 'success': return 'bg-success';
                case 'error': return 'bg-danger';
                case 'warning': return 'bg-warning';
                default: return 'bg-info';
            }
        }

        function testAction(action) {
            let message = '';
            switch (action) {
                case 'document_uploaded':
                    message = '📄 Tài liệu mới: Test Document.pdf đã được tải lên';
                    break;
                case 'document_deleted':
                    message = '🗑️ Tài liệu "Old Document" đã bị xóa';
                    break;
                case 'document_updated':
                    message = '✏️ Tài liệu "Sample Doc" đã được cập nhật';
                    break;
                case 'bookmark_created':
                    message = '🔖 Bookmark mới: Sample Book - Trang 15';
                    break;
            }

            if (connection && connection.state === signalR.HubConnectionState.Connected) {
                connection.invoke('SendNotification', message);
            } else {
                window.NotificationHub.showLocal('SignalR chưa kết nối', 'warning');
            }
        }
    </script>
}